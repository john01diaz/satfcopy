Convert the following Databricks SQL statement into python code.

Value modularity when you generate the python code.
Do not value brevity when you generate the python code.
Use clean coding principles.
Follow the PEP8 style guide.
Use human readable names.
Choose descriptive and unambiguous names.
Choose pronounceable names.
Choose searchable names.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, and dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'.

Treat the input files as pandas dataframes and read them in as parameters at the start.

Treat the input columns in different ways:
Sometimes a column will be passed through without any modification.
Sometimes a column will be simply mapped to a column with a new name, sometimes multiple times.
Sometimes a new column will be added with a constant value.
Sometimes a column will be mapped to a column using more complex calculations.

Do not generate these enums. Assume all enums already exist.

This is the Enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'

This is the enum schema for the output table named S_Terminations.

class S_Terminations(Enum):
CABLENUMBER = 'cablenumber'
CLASS = 'class'
CORE_MARKINGS = 'core_markings'
DATABASE_NAME = 'database_name'
EQUIPMENT_NO = 'equipment_no'
LEFT_RIGHT = 'left_right'
MARKING = 'marking'
OBJECT_IDENTIFIER = 'object_identifier'
PARENT_EQUIPMENT_NO = 'parent_equipment_no'
PARQUET_FILE_RELATIVE_PATH = 'parquet_file_relative_path'

This is the enum schema for the input table(s) named S_Connection, S_ItemFunction, and S_Terminals.

class S_Terminals(
        Enum):
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DYNAMIC_CLASS = 'dynamic_class'
    EQUIPMENT_NO = 'equipment_no'
    MARKING = 'marking'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    SEQUENCE = 'sequence'


class S_ItemFunction(
        Enum):
    ADD = 'add'
    CHANNELNUMBER = 'channelnumber'
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DESCRIPTION = 'description'
    DEVICE_TYPE = 'device_type'
    DOCUMENT_NUMBER = 'document_number'
    DYNAMIC_CLASS = 'dynamic_class'
    FACILITY_DESIGNATION = 'facility_designation'
    FACILITY_DYNAMIC_CLASS = 'facility_dynamic_class'
    FACILITY_OBJECT_IDENTIFIER = 'facility_object_identifier'
    FUNCTION_OCC_OBJECT_IDENTIFIER = 'function_occ_object_identifier'
    IOTYPE = 'iotype'
    ITEM_DYNAMIC_CLASS = 'item_dynamic_class'
    ITEM_OBJECT_IDENTIFIER = 'item_object_identifier'
    ITEM_SLOT = 'item_slot'
    LOCATION_DESIGNATION = 'location_designation'
    LOCATION_DYNAMIC_CLASS = 'location_dynamic_class'
    LOCATION_OBJECT_IDENTIFIER = 'location_object_identifier'
    LOOP_ELEMENT_DYNAMIC_CLASS = 'loop_element_dynamic_class'
    LOOP_ELEMENT_OBJECT_IDENTIFIER = 'loop_element_object_identifier'
    LOOP_NUMBER = 'loop_number'
    MANUFACTURER = 'manufacturer'
    METADATA = 'metadata'
    MODELNO = 'modelno'
    OBJECT_IDENTIFIER = 'object_identifier'
    PRODUCT_DESIGNATION = 'product_designation'
    PRODUCT_KEY = 'product_key'
    PRODUCT_KEY_ORIGINAL = 'product_key_original'
    PROTOCOL = 'protocol'
    RACK = 'rack'
    RACK_DYNAMIC_CLASS = 'rack_dynamic_class'
    RACK_OBJECT_IDENTIFIER = 'rack_object_identifier'
    REMOVE = 'remove'
    ROWIDHIGHWATERMARK = 'rowidhighwatermark'
    SHOW_KEY = 'show_key'
    SYMBOL_NAME = 'symbol_name'
    TAG_NUMBER = 'tag_number'
    TXN = 'txn'
    TYPE = 'type'

class S_Connection(
        Enum):
    CABLE = 'cable'
    CABLE_OBJECT_IDENTIFIER = 'cable_object_identifier'
    CONNECTION_TYPE = 'connection_type'
    DATABASE_NAME = 'database_name'
    DOCUMENT_NUMBER = 'document_number'
    FROM_CONNECTION_PIN_HREF = 'from_connection_pin_href'
    FROM_DYNAMIC_CLASS = 'from_dynamic_class'
    FROM_FACILITY = 'from_facility'
    FROM_ITEM = 'from_item'
    FROM_ITEM_DYNAMIC_CLASS = 'from_item_dynamic_class'
    FROM_ITEM_OBJECT_IDENTIFIER = 'from_item_object_identifier'
    FROM_LOCATION = 'from_location'
    FROM_OBJECT_IDENTIFIER = 'from_object_identifier'
    FROM_TERMINAL_MARKING = 'from_terminal_marking'
    LOOP_NUMBER = 'loop_number'
    OBJECT_IDENTIFIER = 'object_identifier'
    TAG_NUMBER = 'tag_number'
    TO_CONNECTION_PIN_HREF = 'to_connection_pin_href'
    TO_DYNAMIC_CLASS = 'to_dynamic_class'
    TO_FACILITY = 'to_facility'
    TO_ITEM = 'to_item'
    TO_ITEM_DYNAMIC_CLASS = 'to_item_dynamic_class'
    TO_ITEM_OBJECT_IDENTIFIER = 'to_item_object_identifier'
    TO_LOCATION = 'to_location'
    TO_OBJECT_IDENTIFIER = 'to_object_identifier'
    TO_TERMINAL_MARKING = 'to_terminal_marking'
    WIRE_CROSS_SECTION = 'wire_cross_section'
    WIRE_MARKINGS = 'wire_markings'
    WIRE_OBJECT_IDENTIFIER = 'wire_object_identifier'

This is the SQL statement named S_Terminations.
"
create or replace temp view Terminations
as
Select Distinct
 A.database_name
,A.object_identifier
,A.Cable as CableNumber
,Coalesce(Wire_Markings,'1') as Core_Markings
,Coalesce(A.From_Location,'') as Parent_Equipment_No
,Case When B.Type='Field Device' Then B.Tag_Number else Product_Key END as Equipment_No
,A.From_Terminal_Marking as Marking
,'R' as Left_Right
,DT.Class
From Sigraph_silver.S_Connection A
Inner join Sigraph_Silver.S_ItemFunction B On A.database_name=B.database_name and A.From_Dynamic_Class=B.Dynamic_Class
and A.From_Object_identifier=B.Object_identifier
Inner join Sigraph_Silver.S_Terminals DT On DT.Parent_Equipment_No=Coalesce(A.From_Location,'')
and DT.Equipment_No=Case When B.Type='Field Device' Then B.Tag_Number else Product_Key END
and DT.Marking=A.From_Terminal_Marking
WHERE  Coalesce(A.From_Location,'')<>Coalesce(A.TO_Location,'')

UNION
Select Distinct
 A.database_name
,A.object_identifier
,A.Cable as CableNumber
,Coalesce(Wire_Markings,'1')  as CoreMarkings
,Coalesce(A.To_Location,'') as Parent_Equipment_No
,Case When B.Type='Field Device' Then B.Tag_Number else B.Product_Key END as Equipment_No
,A.To_Terminal_Marking as Marking
,'L' as Left_Right
,DT.Class
From Sigraph_silver.S_Connection A
Inner join Sigraph_Silver.S_ItemFunction B On A.database_name=B.database_name and A.To_Dynamic_Class=B.Dynamic_Class
and A.To_Object_identifier=B.Object_identifier
Inner join Sigraph_Silver.S_Terminals DT
On DT.Parent_Equipment_No=Coalesce(A.To_Location,'')
and DT.Equipment_No=Case When B.Type='Field Device' Then B.Tag_Number else B.Product_Key END
and DT.Marking=A.To_Terminal_Marking
WHERE Coalesce(A.From_Location,'')<>Coalesce(A.TO_Location,'')



order by 1,2


GPT-Comment&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


import pandas as pd
from enum import Enum


# Defining all Enums
class DatabaseNames(Enum):
    DATABASE_NAME = 'database_name'


class S_Terminations(Enum):
    CABLENUMBER = 'cablenumber'
    CLASS = 'class'
    CORE_MARKINGS = 'core_markings'
    DATABASE_NAME = 'database_name'
    EQUIPMENT_NO = 'equipment_no'
    LEFT_RIGHT = 'left_right'
    MARKING = 'marking'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    PARQUET_FILE_RELATIVE_PATH = 'parquet_file_relative_path'


class S_Terminals(Enum):
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DYNAMIC_CLASS = 'dynamic_class'
    EQUIPMENT_NO = 'equipment_no'
    MARKING = 'marking'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    SEQUENCE = 'sequence'


class S_ItemFunction(Enum):
    TYPE = 'type'
    TAG_NUMBER = 'tag_number'
    PRODUCT_KEY = 'product_key'
    DATABASE_NAME = 'database_name'
    DYNAMIC_CLASS = 'dynamic_class'
    OBJECT_IDENTIFIER = 'object_identifier'


class S_Connection(Enum):
    DATABASE_NAME = 'database_name'
    OBJECT_IDENTIFIER = 'object_identifier'
    CABLE = 'cable'
    WIRE_MARKINGS = 'wire_markings'
    FROM_LOCATION = 'from_location'
    FROM_DYNAMIC_CLASS = 'from_dynamic_class'
    FROM_OBJECT_IDENTIFIER = 'from_object_identifier'
    FROM_TERMINAL_MARKING = 'from_terminal_marking'
    TO_LOCATION = 'to_location'


# Define named constants
DEFAULT_CORE_MARKINGS = '1'
DEFAULT_EQUIPMENT_NO = ''
FIELD_DEVICE = 'Field Device'
RIGHT_INDICATOR = 'R'
LEFT_INDICATOR = 'L'


def process_terminations(connection_dataframe, itemfunction_dataframe, terminals_dataframe):
    # Merge dataframes for 'from' columns
    first_merge = pd.merge(
        connection_dataframe,
        itemfunction_dataframe,
        left_on=[S_Connection.DATABASE_NAME.value, S_Connection.FROM_DYNAMIC_CLASS.value, S_Connection.FROM_OBJECT_IDENTIFIER.value],
        right_on=[S_ItemFunction.DATABASE_NAME.value, S_ItemFunction.DYNAMIC_CLASS.value, S_ItemFunction.OBJECT_IDENTIFIER.value]
    )
    first_merge[S_Terminations.PARENT_EQUIPMENT_NO.value] = first_merge[S_Connection.FROM_LOCATION.value].fillna(DEFAULT_EQUIPMENT_NO)
    first_merge[S_Terminations.EQUIPMENT_NO.value] = first_merge.apply(
        lambda row: row[S_ItemFunction.TAG_NUMBER.value] if row[S_ItemFunction.TYPE.value] == FIELD_DEVICE else row[S_ItemFunction.PRODUCT_KEY.value], axis=1)
    first_merge[S_Terminations.MARKING.value] = first_merge[S_Connection.FROM_TERMINAL_MARKING.value]
    first_merge[S_Terminations.LEFT_RIGHT.value] = RIGHT_INDICATOR
    first_result = pd.merge(
        first_merge,
        terminals_dataframe,
        left_on=[S_Terminations.PARENT_EQUIPMENT_NO.value, S_Terminations.EQUIPMENT_NO.value, S_Terminations.MARKING.value],
        right_on=[S_Terminals.PARENT_EQUIPMENT_NO.value, S_Terminals.EQUIPMENT_NO.value, S_Terminals.MARKING.value]
    )

    # Filter results for 'from' and 'to' locations
    first_result = first_result[first_result[S_Connection.FROM_LOCATION.value] != first_result[S_Connection.TO_LOCATION.value]]

    # Merge dataframes for 'to' columns
    second_merge = pd.merge(
        connection_dataframe,
        itemfunction_dataframe,
        left_on=[S_Connection.DATABASE_NAME.value, S_Connection.TO_DYNAMIC_CLASS.value, S_Connection.TO_OBJECT_IDENTIFIER.value],
        right_on=[S_ItemFunction.DATABASE_NAME.value, S_ItemFunction.DYNAMIC_CLASS.value, S_ItemFunction.OBJECT_IDENTIFIER.value]
    )
    second_merge[S_Terminations.PARENT_EQUIPMENT_NO.value] = second_merge[S_Connection.TO_LOCATION.value].fillna(DEFAULT_EQUIPMENT_NO)
    second_merge[S_Terminations.EQUIPMENT_NO.value] = second_merge.apply(
        lambda row: row[S_ItemFunction.TAG_NUMBER.value] if row[S_ItemFunction.TYPE.value] == FIELD_DEVICE else row[S_ItemFunction.PRODUCT_KEY.value], axis=1)
    second_merge[S_Terminations.MARKING.value] = second_merge[S_Connection.TO_TERMINAL_MARKING.value]
    second_merge[S_Terminations.LEFT_RIGHT.value] = LEFT_INDICATOR
    second_result = pd.merge(
        second_merge,
        terminals_dataframe,
        left_on=[S_Terminations.PARENT_EQUIPMENT_NO.value, S_Terminations.EQUIPMENT_NO.value, S_Terminations.MARKING.value],
        right_on=[S_Terminals.PARENT_EQUIPMENT_NO.value, S_Terminals.EQUIPMENT_NO.value, S_Terminals.MARKING.value]
    )

    # Filter results for 'from' and 'to' locations
    second_result = second_result[second_result[S_Connection.FROM_LOCATION.value] != second_result[S_Connection.TO_LOCATION.value]]

    # Union the results and sort them
    final_result = pd.concat([first_result, second_result]).sort_values([S_Connection.DATABASE_NAME.value, S_Connection.OBJECT_IDENTIFIER.value])
    return final_result
