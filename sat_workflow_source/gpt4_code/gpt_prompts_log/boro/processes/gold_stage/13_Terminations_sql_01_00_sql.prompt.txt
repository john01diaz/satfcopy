Convert the following Databricks SQL statement into python code.

Do not value brevity.
Make the code as modular as possible.
Use clean coding principles.
Follow the PEP8 style guide.
Use human readable names.
Choose descriptive and unambiguous names.
Choose pronounceable names.
Choose searchable names.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'. Do not abbreviate.

Treat the input files as pandas dataframes and read them in as parameters at the start.

Treat the input columns in different ways, modularise these different ways if possible.
A column will be passed through without any modification.
A columnn will be simply mapped to a column with a new name, sometimes multiple times.
A new columnn will be added with a constant value
A columnn will be mapped to a column using  more complex calculations

Refer to the following enums when using column names.
Do not generate the enums. Instead, refer to them in the transformation you generate.

This is the enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'

This is the enum schema for the output table named Terminations

class Terminations(
        Enum):
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    EQUIPMENT_NO = 'equipment_no'
    CABLENUMBER = 'cablenumber'
    CORE_MARKINGS = 'core_markings'
    MARKING = 'marking'
    LEFT_RIGHT = 'left_right'



This is the enum schema for the input table named S_Terminations

class S_Terminations(
        Enum):
    CABLENUMBER = 'cablenumber'
    CLASS = 'class'
    CORE_MARKINGS = 'core_markings'
    DATABASE_NAME = 'database_name'
    EQUIPMENT_NO = 'equipment_no'
    LEFT_RIGHT = 'left_right'
    MARKING = 'marking'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    PARQUET_FILE_RELATIVE_PATH = 'parquet_file_relative_path'


This is the SQL statement named 13_Terminations. Fully generate the mappings.

Select Distinct
CableNumber
,Core_Markings
,Parent_Equipment_No
,Equipment_No
,Marking
,Left_Right
From Sigraph_Silver.S_Terminations
Where Class in ('Instrumentation','Inst(Shared)','Elec(Shared)')
and database_name in (Select Database_name from VW_Database_names)


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

from enum import Enum
import pandas

class DatabaseNames(Enum):
    DATABASE_NAME = 'database_name'

class Terminations(Enum):
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    EQUIPMENT_NO = 'equipment_no'
    CABLENUMBER = 'cablenumber'
    CORE_MARKINGS = 'core_markings'
    MARKING = 'marking'
    LEFT_RIGHT = 'left_right'

class S_Terminations(Enum):
    CABLENUMBER = 'cablenumber'
    CLASS = 'class'
    CORE_MARKINGS = 'core_markings'
    DATABASE_NAME = 'database_name'
    EQUIPMENT_NO = 'equipment_no'
    LEFT_RIGHT = 'left_right'
    MARKING = 'marking'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    PARQUET_FILE_RELATIVE_PATH = 'parquet_file_relative_path'

def filter_and_select_data(terminations: pandas.DataFrame, database_names: pandas.DataFrame):
    # Define the classes we're interested in
    classes_of_interest = ['Instrumentation','Inst(Shared)','Elec(Shared)']

    # Filter terminations by the classes_of_interest
    filtered_terminations = terminations[terminations[S_Terminations.CLASS.value].isin(classes_of_interest)]

    # Filter terminations where the database_name is in the database_names dataframe
    database_names_list = database_names[DatabaseNames.DATABASE_NAME.value].unique()
    filtered_terminations = filtered_terminations[filtered_terminations[S_Terminations.DATABASE_NAME.value].isin(database_names_list)]

    # Select distinct rows
    filtered_terminations = filtered_terminations[[S_Terminations.CABLENUMBER.value,
                                                   S_Terminations.CORE_MARKINGS.value,
                                                   S_Terminations.PARENT_EQUIPMENT_NO.value,
                                                   S_Terminations.EQUIPMENT_NO.value,
                                                   S_Terminations.MARKING.value,
                                                   S_Terminations.LEFT_RIGHT.value]].drop_duplicates()

    return filtered_terminations
