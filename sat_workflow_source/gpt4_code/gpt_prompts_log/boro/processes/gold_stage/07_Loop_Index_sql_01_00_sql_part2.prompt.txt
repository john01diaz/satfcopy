&&&&& prompt 1 &&&&&&&&&&&&&


Convert the following Databricks SQL statement into python code.

Do not value brevity.
Make the code as modular as possible.
Use clean coding principles.
Follow the PEP8 style guide.
Use human readable names.
Choose descriptive and unambiguous names.
Choose pronounceable names.
Choose searchable names.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'. Do not abbreviate.

Treat the input files as pandas dataframes and read them in as parameters at the start. You can assume that the dataframes exist.

Treat the input columns in different ways, modularise these different ways if possible.
A column will be passed through without any modification.
A columnn will be simply mapped to a column with a new name, sometimes multiple times.
A new columnn will be added with a constant value
A columnn will be mapped to a column using  more complex calculations

Do not concatenate pandas Series objects with a string ('-').
For join statements: before doing any merge, reduce the size of the data to be merged by filtering dataframes to the columns required.
Make sure to not set a value on a copy of a slice from a DataFrame.

Do not generate the enums. Refer to the following enums when using column names.

These are the enum schemas for the input tables

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'


class S_LoopIndex(
        Enum):
    DATABASE_NAME = 'database_name'
    STANDARD_LOOP_ID = 'standard_loop_id'
    DYNAMIC_CLASS = 'dynamic_class'
    OBJECT_IDENTIFIER = 'object_identifier'
    NAME = 'name'
    LOOPNO = 'loopno'
    AREA = 'area'
    NUMBER = 'number'
    SUFFIX = 'suffix'
    FORMATNAME = 'formatname'
    AREAPATH = 'areapath'
    FUNCTION = 'function'
    REMARKS = 'remarks'
    LOOP_SERVICE_1 = 'loop_service_1'
    FUNC_DESCRIPTION = 'func_description'
    RESP_WORK_CENTER = 'resp_work_center'
    AIR_DISTRIBUTOR = 'air_distributor'
    VAR_PART_OF_DRAWING_NO = 'var_part_of_drawing_no'
    SUPPL_CHAR_1 = 'suppl_char_1'
    VISUAL_INSPECTION = 'visual_inspection'
    Y_COORD = 'y_coord'
    ET_STRUCTURE = 'et_structure'
    X_COORD = 'x_coord'
    FIELD_DISTRIB_OUTPUT = 'field_distrib_output'
    SUPPL_CHAR_3 = 'suppl_char_3'
    SUPPL_CHAR_2 = 'suppl_char_2'
    PLANNING_GROUP = 'planning_group'
    TESTED_BY = 'tested_by'
    TEST_ACC_TO_TEST_CATALOG = 'test_acc_to_test_catalog'
    TEST_ACC_BY_TEST_CATALOG = 'test_acc_by_test_catalog'
    LOGIC_DIAG_TYPICAL = 'logic_diag_typical'
    PURPOSE_OF_INSPECTION = 'purpose_of_inspection'
    INSPECTION_INTERVAL = 'inspection_interval'
    UNIT = 'unit'
    ACCOMP_DOCUMENTS = 'accomp_documents'
    FIELD_DISTRIB_INPUT = 'field_distrib_input'
    REALIZATION_POS = 'realization_pos'
    FUNCTION_TEST = 'function_test'
    LOOP_SERVICE_3 = 'loop_service_3'
    GRAPHICAL_TYPICAL = 'graphical_typical'
    LOOP_SERVICE_2 = 'loop_service_2'
    STATUS_REMARK = 'status_remark'
    LOOP_NO = 'loop_no'
    LOOP_FUNCTION = 'loop_function'
    CLASS = 'class'
    STATUS = 'status'
    EP_ORIGIN = 'ep_origin'
    CLASSIFICATION = 'classification'
    RELATED_REPORT = 'related_report'
    ROOT_EXTRACTION_POINT = 'root_extraction_point'
    SPECIAL_REQ_1 = 'special_req_1'
    SPECIAL_REQ_2 = 'special_req_2'
    SPECIAL_REQ_3 = 'special_req_3'
    CLASSIFICATION_BY = 'classification_by'
    SIFPRO_RELEVANT = 'sifpro_relevant'

This is the enum schema for the output table

class Loop_Index(
        Enum):
    ACCOMP_DOCUMENTS = 'accomp documents'
    AIR_DISTRIBUTOR = 'air distributor'
    AREA = 'area'
    AREAPATH = 'areapath'
    CLASSIFICATION = 'classification'
    CLASSIFICATION_BY = 'classification by'
    CLASSNAME = 'classname'
    DRAWING = 'drawing'
    EP_ORIGIN = 'ep origin'
    ET_STRUCTURE = 'et structure'
    FIELD_DISTRIB_INPUT = 'field distrib input'
    FIELD_DISTRIB_OUTPUT = 'field distrib output'
    FORMATNAME = 'formatname'
    FUNC_DESCRIPTION = 'func description'
    FUNCTION = 'function'
    FUNCTION_TEST = 'function test'
    GRAPHICAL_TYPICAL = 'graphical typical'
    INSPECTION_INTERVAL = 'inspection interval'
    LOGIC_DIAG_TYPICAL = 'logic diag typical'
    LOOP_FUNCTION = 'loop function'
    LOOP_NO = 'loop no'
    LOOP_SERVICE_1 = 'loop service-1'
    LOOP_SERVICE_2 = 'loop service-2'
    LOOP_SERVICE_3 = 'loop service-3'
    NUMBER = 'number'
    PLANNING_GROUP = 'planning group'
    PURPOSE_OF_INSPECTION = 'purpose of inspection'
    REALIZATION_POS = 'realization pos'
    RELATED_REPORT = 'related report'
    REMARKS = 'remarks'
    RESP_WORK_CENTER = 'resp work center'
    ROOT_EXTRACTION_POINT = 'root extraction point'
    SIFPRO_RELEVANT = 'sifpro relevant'
    SPECIAL_REQ_1 = 'special req 1'
    SPECIAL_REQ_2 = 'special req 2'
    SPECIAL_REQ_3 = 'special req 3'
    STANDARD_LOOP_ID = 'standard loop id'
    STATUS = 'status'
    STATUS_REMARK = 'status remark'
    SUFFIX = 'suffix'
    SUPPL_CHAR_1 = 'suppl char 1'
    SUPPL_CHAR_2 = 'suppl char 2'
    SUPPL_CHAR_3 = 'suppl char 3'
    TEST_ACC_BY_TEST_CATALOG = 'test acc by test catalog'
    TEST_ACC_TO_TEST_CATALOG = 'test acc to test catalog'
    TESTED_BY = 'tested by'
    UNIT = 'unit'
    VAR_PART_OF_DRAWING_NO = 'var part of drawing no'
    VISUAL_INSPECTION = 'visual inspection'
    WIRED = 'wired'
    X_COORD = 'x coord.'
    Y_COORD = 'y coord.'

This is the SQL statement named 07_Loop_Index_sql_01_00.sql

Select distinct
EP_Origin  As `EP Origin`
,`Y_Coord.`  As `Y Coord.`
,ET_structure  As `ET structure`
,Classification  As `Classification`
,Related_Report  As `Related Report`
,`X_Coord.`  As `X Coord.`
,Field_Distrib_Output  As `Field Distrib Output`
,Root_Extraction_Point  As `Root Extraction Point`
,Suppl_char_3  As `Suppl char 3`
,Suppl_char_2  As `Suppl char 2`
,Planning_Group  As `Planning Group`
,Tested_by  As `Tested by`
,Test_Acc_to_Test_Catalog  As `Test Acc to Test Catalog`
,Test_Acc_by_Test_Catalog  As `Test Acc by Test Catalog`
,Logic_Diag_Typical  As `Logic Diag Typical`
,Purpose_of_Inspection  As `Purpose of Inspection`
,Inspection_Interval  As `Inspection Interval`
,Special_Req_3  As `Special Req 3`
,Unit  As `Unit`
,Accomp_Documents  As `Accomp Documents`
,Special_Req_2  As `Special Req 2`
,Field_Distrib_Input  As `Field Distrib Input`
,Special_Req_1  As `Special Req 1`
,Realization_Pos  As `Realization Pos`
,Function_Test  As `Function Test`
,Graphical_Typical  As `Graphical Typical`
,Standard_Loop_ID  As `Standard Loop ID`
,Status_Remark  As `Status Remark`

FROM sigraph_silver.S_LOOP_INDEX loop
Where Class='Instrumentation' and database_name in (Select Database_name from VW_Database_names)


&&&&&&&&&&&chatGPT&&&&&&&&&&&

from enum import Enum


def filter_database_names(loop_index_dataframe, database_names_dataframe):
    database_names = set(database_names_dataframe[DatabaseNames.DATABASE_NAME.value])
    return loop_index_dataframe[loop_index_dataframe[S_LoopIndex.DATABASE_NAME.value].isin(database_names)]


def filter_class(loop_index_dataframe, class_value='Instrumentation'):
    return loop_index_dataframe[loop_index_dataframe[S_LoopIndex.CLASS.value] == class_value]


def select_columns_and_rename(loop_index_dataframe):
    columns_mapping = {
        S_LoopIndex.EP_ORIGIN.value: Loop_Index.EP_ORIGIN.value,
        S_LoopIndex.Y_COORD.value: Loop_Index.Y_COORD.value,
        S_LoopIndex.ET_STRUCTURE.value: Loop_Index.ET_STRUCTURE.value,
        S_LoopIndex.CLASSIFICATION.value: Loop_Index.CLASSIFICATION.value,
        S_LoopIndex.RELATED_REPORT.value: Loop_Index.RELATED_REPORT.value,
        S_LoopIndex.X_COORD.value: Loop_Index.X_COORD.value,
        S_LoopIndex.FIELD_DISTRIB_OUTPUT.value: Loop_Index.FIELD_DISTRIB_OUTPUT.value,
        S_LoopIndex.ROOT_EXTRACTION_POINT.value: Loop_Index.ROOT_EXTRACTION_POINT.value,
        S_LoopIndex.SUPPL_CHAR_3.value: Loop_Index.SUPPL_CHAR_3.value,
        S_LoopIndex.SUPPL_CHAR_2.value: Loop_Index.SUPPL_CHAR_2.value,
        S_LoopIndex.PLANNING_GROUP.value: Loop_Index.PLANNING_GROUP.value,
        S_LoopIndex.TESTED_BY.value: Loop_Index.TESTED_BY.value,
        S_LoopIndex.TEST_ACC_TO_TEST_CATALOG.value: Loop_Index.TEST_ACC_TO_TEST_CATALOG.value,
        S_LoopIndex.TEST_ACC_BY_TEST_CATALOG.value: Loop_Index.TEST_ACC_BY_TEST_CATALOG.value,
        S_LoopIndex.LOGIC_DIAG_TYPICAL.value: Loop_Index.LOGIC_DIAG_TYPICAL.value,
        S_LoopIndex.PURPOSE_OF_INSPECTION.value: Loop_Index.PURPOSE_OF_INSPECTION.value,
        S_LoopIndex.INSPECTION_INTERVAL.value: Loop_Index.INSPECTION_INTERVAL.value,
        S_LoopIndex.SPECIAL_REQ_3.value: Loop_Index.SPECIAL_REQ_3.value,
        S_LoopIndex.UNIT.value: Loop_Index.UNIT.value,
        S_LoopIndex.ACCOMP_DOCUMENTS.value: Loop_Index.ACCOMP_DOCUMENTS.value,
        S_LoopIndex.SPECIAL_REQ_2.value: Loop_Index.SPECIAL_REQ_2.value,
        S_LoopIndex.FIELD_DISTRIB_INPUT.value: Loop_Index.FIELD_DISTRIB_INPUT.value,
        S_LoopIndex.SPECIAL_REQ_1.value: Loop_Index.SPECIAL_REQ_1.value,
        S_LoopIndex.REALIZATION_POS.value: Loop_Index.REALIZATION_POS.value,
        S_LoopIndex.FUNCTION_TEST.value: Loop_Index.FUNCTION_TEST.value,
        S_LoopIndex.GRAPHICAL_TYPICAL.value: Loop_Index.GRAPHICAL_TYPICAL.value,
        S_LoopIndex.STANDARD_LOOP_ID.value: Loop_Index.STANDARD_LOOP_ID.value,
        S_LoopIndex.STATUS_REMARK.value: Loop_Index.STATUS_REMARK.value,
    }

    renamed_loop_index_dataframe = loop_index_dataframe.rename(columns=columns_mapping)
    return renamed_loop_index_dataframe[list(columns_mapping.values())]


def main(loop_index_dataframe, database_names_dataframe):
    loop_index_dataframe = filter_database_names(loop_index_dataframe, database_names_dataframe)
    loop_index_dataframe = filter_class(loop_index_dataframe)
    loop_index_dataframe = select_columns_and_rename(loop_index_dataframe)
    return loop_index_dataframe.drop_duplicates()


&&&&&&&&&&&&&&&  prompt 2 &&&&&&&&&&&&&&&&&&&

can you add  a reordering of the columns as per the SQL script using a list called column_order?

&&&&&&&&&&&&&&& chatGPT &&&&&&&&&&&&&&&&&&&&&

column_order = [
    Loop_Index.EP_ORIGIN.value,
    Loop_Index.Y_COORD.value,
    Loop_Index.ET_STRUCTURE.value,
    Loop_Index.CLASSIFICATION.value,
    Loop_Index.RELATED_REPORT.value,
    Loop_Index.X_COORD.value,
    Loop_Index.FIELD_DISTRIB_OUTPUT.value,
    Loop_Index.ROOT_EXTRACTION_POINT.value,
    Loop_Index.SUPPL_CHAR_3.value,
    Loop_Index.SUPPL_CHAR_2.value,
    Loop_Index.PLANNING_GROUP.value,
    Loop_Index.TESTED_BY.value,
    Loop_Index.TEST_ACC_TO_TEST_CATALOG.value,
    Loop_Index.TEST_ACC_BY_TEST_CATALOG.value,
    Loop_Index.LOGIC_DIAG_TYPICAL.value,
    Loop_Index.PURPOSE_OF_INSPECTION.value,
    Loop_Index.INSPECTION_INTERVAL.value,
    Loop_Index.SPECIAL_REQ_3.value,
    Loop_Index.UNIT.value,
    Loop_Index.ACCOMP_DOCUMENTS.value,
    Loop_Index.SPECIAL_REQ_2.value,
    Loop_Index.FIELD_DISTRIB_INPUT.value,
    Loop_Index.SPECIAL_REQ_1.value,
    Loop_Index.REALIZATION_POS.value,
    Loop_Index.FUNCTION_TEST.value,
    Loop_Index.GRAPHICAL_TYPICAL.value,
    Loop_Index.STANDARD_LOOP_ID.value,
    Loop_Index.STATUS_REMARK.value,
]
