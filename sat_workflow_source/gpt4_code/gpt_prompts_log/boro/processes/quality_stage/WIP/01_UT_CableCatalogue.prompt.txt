Convert the following Azure SQL statement into python code.

Value modularity when you generate the python code.
Do not value brevity when you generate the python code.
Generate an orchestrating function for the component functions.
Make the name of the orchestrating function: create_silver_UT_xxxx
Make the parameter of the orchestration function a dictionary named input_tables.
Make the orchestrating function a public function at the beginning of the script.
Add double underscore to the beginning of the private function names.

Use clean coding principles.
Follow the PEP8 style guide.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, and dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'.

Treat the input into the orchetrating function as a dictionary of dataframes.
Use the table names in the following schemas to load the dataframes from the dictionary name input_tables.

Treat the input columns in different ways:
Sometimes a column will be passed through without any modification.
Sometimes a column will be simply mapped to a column with a new name, sometimes multiple times.
Sometimes a new column will be added with a constant value.
Sometimes a column will be mapped to a column using more complex calculations.

Use the following Enum when using column names.

This is the Enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'


This is the enum schema for the input and output table(s) named S_CableCatalogue.

class S_CableCatalogue(
        Enum):
    ALLOWUSE = 'allowuse'
    ARMOURED = 'armoured'
    CLASS = 'class'
    COLOUR1 = 'colour1'
    COLOUR2 = 'colour2'
    DATABASE_NAME = 'database_name'
    DESCRIPTION = 'description'
    DRUMLENGTH = 'drumlength'
    EARTH_CORE_SIZE = 'earth_core_size'
    EARTHCORE = 'earthcore'
    GROUPSCR = 'groupscr'
    GROUPTYPE = 'grouptype'
    LINETYPE = 'linetype'
    LINETYPEARROWHEAD = 'linetypearrowhead'
    LINETYPECOLOR = 'linetypecolor'
    LINETYPEWIDTH = 'linetypewidth'
    MANUFACTURER = 'manufacturer'
    MATERIAL = 'material'
    NOOFGROUPS = 'noofgroups'
    OASCR = 'oascr'
    OBJECT_IDENTIFIER = 'object_identifier'
    OD = 'od'
    REMARKS = 'remarks'
    SIZE = 'size'
    VOLTAGE = 'voltage'

Script 1:

sql
Copy code
CREATE OR REPLACE TEMP VIEW UT_VW_CABLE_CATALOGUE_PART1 AS
Select
 A.database_name
,A.object_identifier
,'111' as UT_ID
,CASE WHEN B.Object_Identifier is not null then 'Pass' else 'Fail' end as Test_Case
from Sigraph.Cable A
Left outer join SIgraph_Silver.S_CableCatalogue B On A.database_name=B.database_name and A.Object_Identifier=B.Object_Identifier;
Script 2:

sql
Copy code
CREATE OR REPLACE TEMP VIEW DUP_OBJECTS AS
Select database_name, object_identifier
from SIgraph_Silver.S_CableCatalogue
Group by database_name,object_identifier
Having Count(1)>1;

CREATE OR REPLACE TEMP VIEW UT_VW_CABLE_CATALOGUE_PART2 AS
Select
 A.database_name
,A.object_identifier
,'110' as UT_ID
,CASE WHEN B.Object_Identifier is null then 'Pass' else 'Fail' end as Test_Case
from SIgraph_Silver.S_CableCatalogue A
Left outer join DUP_OBJECTS B On A.database_name=B.database_name and A.Object_Identifier=B.Object_Identifier;
Script 3:

sql
Copy code
CREATE OR REPLACE TEMP VIEW UT_VW_CABLE_CATALOGUE_PART3 AS
Select
 A.database_name
,A.object_identifier
,'112' as UT_ID
,CASE WHEN Size like '0.8mm2' then 'Fail' else 'Pass' end as Test_Case
from SIgraph_Silver.S_CableCatalogue A
Where A.EarthCore='TRUE';
Script 4:

sql
Copy code
DELETE FROM SIGRAPH_SILVER.UNIT_TEST_RESULTS WHERE Loader_Name='CABLE_CATALOGUE';
Script 5:

sql
Copy code
INSERT INTO SIGRAPH_SILVER.UNIT_TEST_RESULTS (Loader_Name,database_name,Object_Identifier,UT_ID,Test_Case)
SELECT 'CABLE_CATALOGUE' AS Loader_Name,
*
FROM UT_VW_CABLE_CATALOGUE_PART1

UNION

SELECT 'CABLE_CATALOGUE' AS Loader_Name,
*
FROM UT_VW_CABLE_CATALOGUE_PART2

UNION

SELECT 'CABLE_CATALOGUE' AS Loader_Name,
*
FROM UT_VW_CABLE_CATALOGUE_PART3;


def __create_UT_VW_CABLE_CATALOGUE_PART1(input_tables):
    cable_dataframe = input_tables['Sigraph.Cable']
    catalogue_dataframe = input_tables['SIgraph_Silver.S_CableCatalogue']

    part1_dataframe = pandas.merge(cable_dataframe, catalogue_dataframe, how='left', on=[DatabaseNames.DATABASE_NAME.value, S_CableCatalogue.OBJECT_IDENTIFIER.value])

    part1_dataframe['UT_ID'] = UT_ID_1
    part1_dataframe['Test_Case'] = part1_dataframe[S_CableCatalogue.OBJECT_IDENTIFIER.value].apply(lambda x: 'Pass' if pandas.notnull(x) else 'Fail')

    return part1_dataframe

def __create_UT_VW_CABLE_CATALOGUE_PART2(input_tables):
    catalogue_dataframe = input_tables['SIgraph_Silver.S_CableCatalogue']

    dup_objects_dataframe = catalogue_dataframe.groupby([DatabaseNames.DATABASE_NAME.value, S_CableCatalogue.OBJECT_IDENTIFIER.value]).filter(lambda x: len(x) > 1)

    part2_dataframe = pandas.merge(catalogue_dataframe, dup_objects_dataframe, how='left', on=[DatabaseNames.DATABASE_NAME.value, S_CableCatalogue.OBJECT_IDENTIFIER.value])

    part2_dataframe['UT_ID'] = UT_ID_2
    part2_dataframe['Test_Case'] = part2_dataframe[S_CableCatalogue.OBJECT_IDENTIFIER.value+'_y'].apply(lambda x: 'Pass' if pandas.isnull(x) else 'Fail')

    return part2_dataframe

def __create_UT_VW_CABLE_CATALOGUE_PART3(input_tables):
    catalogue_dataframe = input_tables['SIgraph_Silver.S_CableCatalogue']

    part3_dataframe = catalogue_dataframe[catalogue_dataframe[S_CableCatalogue.EARTHCORE.value]=='TRUE'].copy()

    part3_dataframe['UT_ID'] = UT_ID_3
    part3_dataframe['Test_Case'] = part3_dataframe[S_CableCatalogue.SIZE.value].apply(lambda x: 'Fail' if x == FAILURE_SIZE else 'Pass')

    return part3_dataframe

def __delete_UNIT_TEST_RESULTS(unit_test_results_dataframe):
    unit_test_results_dataframe = unit_test_results_dataframe[unit_test_results_dataframe['Loader_Name'] != LOADER_NAME]
    return unit_test_results_dataframe

def __insert_UNIT_TEST_RESULTS(unit_test_results_dataframe, ut_vw_cable_catalogue_dataframe):
    ut_vw_cable_catalogue_dataframe['Loader_Name'] = LOADER_NAME
    unit_test_results_dataframe = pandas.concat([unit_test_results_dataframe, ut_vw_cable_catalogue_dataframe])
    return unit_test_results_dataframe

def create_silver_UT_xxxx(input_tables):
    part1_dataframe = __create_UT_VW_CABLE_CATALOGUE_PART1(input_tables)
    part2_dataframe = __create_UT_VW_CABLE_CATALOGUE_PART2(input_tables)
    part3_dataframe = __create_UT_VW_CABLE_CATALOGUE_PART3(input_tables)

    ut_vw_cable_catalogue_dataframe = pandas.concat([part1_dataframe, part2_dataframe, part3_dataframe])

    unit_test_results_dataframe = input_tables['SIGRAPH_SILVER.UNIT_TEST_RESULTS']

    unit_test_results_dataframe = __delete_UNIT_TEST_RESULTS(unit_test_results_dataframe)

    unit_test_results_dataframe = __insert_UNIT_TEST_RESULTS(unit_test_results_dataframe, ut_vw_cable_catalogue_dataframe)

    return unit_test_results_dataframe
