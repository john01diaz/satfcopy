from sat_workflow_source.b_code.etl_schemas.common.database_names import DatabaseNames
from sat_workflow_source.b_code.etl_schemas.silver_stage.s_terminals import S_Terminals


def __create_view_database_names(dataframes_dictionary):
    dataframe = dataframes_dictionary['VW_Database_names']
    return dataframe[[DatabaseNames.DATABASE_NAME.value]]

def __create_view_s_terminals(dataframes_dictionary):
    dataframe = dataframes_dictionary['Sigraph_Silver.S_Terminals']
    dataframe = dataframe[dataframe[S_Terminals.CLASS.value].isin(['Instrumentation', 'Inst(Shared)', 'Elec(Shared)'])]
    dataframe = dataframe[dataframe[S_Terminals.DATABASE_NAME.value].isin(__create_view_database_names(dataframes_dictionary)[DatabaseNames.DATABASE_NAME.value])]
    return dataframe[[S_Terminals.PARENT_EQUIPMENT_NO.value, S_Terminals.EQUIPMENT_NO.value, S_Terminals.MARKING.value]].drop_duplicates()

def __create_view_final_output(dataframes_dictionary):
    dataframe = __create_view_s_terminals(dataframes_dictionary)
    dataframe[S_Terminals.SEQUENCE.value] = dataframe.groupby([S_Terminals.PARENT_EQUIPMENT_NO.value, S_Terminals.EQUIPMENT_NO.value])[S_Terminals.MARKING.value].rank(method='dense')
    return dataframe

def create_dataframe_gold_c12_terminals_sql_01_00(input_tables):
    output_dataframe = __create_view_final_output(input_tables)
    return output_dataframe[[S_Terminals.PARENT_EQUIPMENT_NO.value, S_Terminals.EQUIPMENT_NO.value, S_Terminals.MARKING.value, S_Terminals.SEQUENCE.value]]
