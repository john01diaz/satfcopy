Convert the following Azure SQL statement into python code.

Value modularity when you generate the python code.
Do not value brevity when you generate the python code.
Generate an orchestrating function for the component functions.
Generate an orchestrating function for the component functions. Add an underscore to the beginning of component function names.
Make the name of the main function: create_dataframe_gold_c10_component_sql_01_00.
Use clean coding principles.
Follow the PEP8 style guide.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, and dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'.

Treat the input files as pandas dataframes and read them in as parameters at the start.

Treat the input columns in different ways:
Sometimes a column will be passed through without any modification.
Sometimes a column will be simply mapped to a column with a new name, sometimes multiple times.
Sometimes a new column will be added with a constant value.
Sometimes a column will be mapped to a column using more complex calculations.

Use the following Enum when using column names.

This is the Enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'
    
This is the enum schema for the output table named [Component].
class S_Component(
        Enum):
    CATALOGUENO = 'catalogueno'
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DINRAIL = 'dinrail'
    DYNAMIC_CLASS = 'dynamic_class'
    EQUIPMENT_NO = 'equipment_no'
    EQUIPMENTTYPE = 'equipmenttype'
    ITEM_DYNAMIC_CLASS = 'item_dynamic_class'
    ITEM_OBJECT_IDENTIFIER = 'item_object_identifier'
    OBJECT_IDENTIFIER = 'object_identifier'
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    REMARKS = 'remarks'
    SEQUENCE = 'sequence'

This is the enum schema for the input table(s) named [yyyyy], [zzzzz] [...].
class Component(
        Enum):
    PARENT_EQUIPMENT_NO = 'parent_equipment_no'
    EQUIPMENT_NO = 'equipment_no'
    EQUIPMENTTYPE = 'equipmenttype'
    CATALOGUENO = 'catalogueno'
    DINRAIL = 'dinrail'
    SEQUENCE = 'sequence'
    REMARKS = 'remarks'

This is the SQL statement named.


-- Sub-script 1: Get database names
SELECT Database_name 
FROM VW_Database_names;

-- Sub-script 2: Filter the S_Component table
SELECT DISTINCT
    Parent_Equipment_No,
    Equipment_No,
    EquipmentType,
    CatalogueNo,
    DinRail,
    Remarks,
    Item_Object_identifier
FROM Sigraph_Silver.S_Component 
WHERE Class IN ('Instrumentation','Inst(Shared)','Elec(Shared)') 
    AND database_name IN (SELECT Database_name FROM DatabaseNames);

-- Sub-script 3: Calculate sequence numbers
SELECT 
    Parent_Equipment_No,
    Equipment_No,
    EquipmentType,
    CatalogueNo,
    DinRail,
    ROW_NUMBER() OVER(PARTITION BY Parent_Equipment_No, DinRail ORDER BY Item_Object_identifier) AS Sequence,
    Remarks  
FROM FilteredComponents;