Convert the following Azure SQL statement into python code.

Value modularity when you generate the python code.
Do not value brevity when you generate the python code.
Generate an orchestrating function for the component functions.
Make the name of the orchestrating function:create_dataframe_gold_c02_instrument_type_catalogue_sql_01_00
Make the parameter of the orchestration function a dictionary named input_tables.
Make the orchestrating function a public function at the beginning of the script.
Add double underscore to the beginning of the private function names.

Use clean coding principles.
Follow the PEP8 style guide.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, and dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'.

Treat the input into the orchetrating function as a dictionary of dataframes.
Use the table names in the following schemas to load the dataframes from the dictionary name input_tables. 

Treat the input columns in different ways:
Sometimes a column will be passed through without any modification.
Sometimes a column will be simply mapped to a column with a new name, sometimes multiple times.
Sometimes a new column will be added with a constant value.
Sometimes a column will be mapped to a column using more complex calculations.
Please keep in mind that sql is processed from the bottom up.

Use the following Enum when using column names.

This is the Enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'
    
This is the enum schema for the output table named [xxxxx].




class Field_Device_Catalogue(
        Enum):
    CATALOGUE_NAME = 'catalogue_name'
    LEFT_PIN_DETAILS = 'left_pin_details'
    LEFT_MARKING = 'left_marking'
    RIGHT_PIN_DETAILS = 'right_pin_details'
    RIGHT_MARKING = 'right_marking'
    TAG_NUMBER = 'tag_number'
    LOOP_NUMBER = 'loop_number'
    DOCUMENT_NUMBER = 'document_number'

This is the enum schema for the input table(s) named [CS_field_device_catalogue].

class S_Field_Device_Catalogue(
        Enum):
    DATABASE_NAME = 'database_name'
    DYNAMIC_CLASS = 'dynamic_class'
    CATALOGUE_RNT = 'catalogue_rnt'
    OBJECT_IDENTIFIER = 'object_identifier'
    CATALOGUE_NAME = 'catalogue_name'
    LEFT_PIN_DETAILS = 'left_pin_details'
    LEFT_MARKING = 'left_marking'
    RIGHT_PIN_DETAILS = 'right_pin_details'
    RIGHT_MARKING = 'right_marking'
    TAG_NUMBER = 'tag_number'
    LOOP_NUMBER = 'loop_number'
    DOCUMENT_NUMBER = 'document_number'
    CLASS = 'class'


This is the SQL statement named [05_field_device_catalogue_sql_01_00]: 

Select Distinct 
  A.Catalogue_Name,
  A.Left_pin_details,
  A.Left_Marking,
  A.Right_pin_details,
  A.Right_Marking,
  A.Tag_Number,
  A.Loop_Number,
  A.Document_number
From SIGRAPH_SILVER.S_FIELD_DEVICE_CATALOGUE A
Where Catalogue_RNT=1 and Catalogue_Name<>''
and database_name in (Select Database_name from VW_Database_names)