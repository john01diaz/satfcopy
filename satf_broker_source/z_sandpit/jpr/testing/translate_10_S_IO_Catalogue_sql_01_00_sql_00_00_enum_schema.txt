Convert the following Databricks SQL statement into python code.

Value modularity when you generate the python code.
Generate an orchestrating function for the component functions.
Add an underscore to the beginning of component function names.
Do not value brevity when you generate the python code.
Use clean coding principles.
Follow the PEP8 style guide.
Use human readable names.
Choose descriptive and unambiguous names.
Choose pronounceable names.
Choose searchable names.
Never choose any abbreviations or shortened variable names.
Replace magic numbers with named constants.
Define any literals as named constants.
Define and name all lists and arrays separately.
Fully generate all lists, arrays, and dictionaries of mappings.
Use the names 'dataframe' instead of 'df' and 'pandas' instead of 'pd'.

Treat the input files as pandas dataframes and read them in as parameters at the start.

Treat the input columns in different ways:
Sometimes a column will be passed through without any modification.
Sometimes a column will be simply mapped to a column with a new name, sometimes multiple times.
Sometimes a new column will be added with a constant value.
Sometimes a column will be mapped to a column using more complex calculations

Use the following Enum when using column names.

This is the Enum schema for the table named DatabaseNames

class DatabaseNames(
        Enum):
    DATABASE_NAME = 'database_name'

This is the enum schema for the output table named S_IO_Catalogue_01

class S_IO_Catalogue(
        Enum):
    ALLOWUSE = 'allowuse'
    CATALOGUE_RNT = 'catalogue_rnt'
    CHANNEL = 'channel'
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DESCRIPTION = 'description'
    DESCRIPTIONDRAWING = 'descriptiondrawing'
    DYNAMIC_CLASS = 'dynamic_class'
    IOTYPE = 'iotype'
    MANUFACTURER = 'manufacturer'
    MODEL_NUMBER = 'model_number'
    NOOFPOINTS = 'noofpoints'
    OBJECT_IDENTIFIER = 'object_identifier'
    TERMINALSPERMARKING = 'terminalspermarking'
    TERMINALSPERPOINTCHANNEL = 'terminalsperpointchannel'

These are the enums for the input table schemas named S_ItemFunction and S_Item_Function_Model

class S_ItemFunction(
        Enum):
    ADD = 'add'
    CHANNELNUMBER = 'channelnumber'
    CLASS = 'class'
    DATABASE_NAME = 'database_name'
    DESCRIPTION = 'description'
    DEVICE_TYPE = 'device_type'
    DOCUMENT_NUMBER = 'document_number'
    DYNAMIC_CLASS = 'dynamic_class'
    FACILITY_DESIGNATION = 'facility_designation'
    FACILITY_DYNAMIC_CLASS = 'facility_dynamic_class'
    FACILITY_OBJECT_IDENTIFIER = 'facility_object_identifier'
    FUNCTION_OCC_OBJECT_IDENTIFIER = 'function_occ_object_identifier'
    IOTYPE = 'iotype'
    ITEM_DYNAMIC_CLASS = 'item_dynamic_class'
    ITEM_OBJECT_IDENTIFIER = 'item_object_identifier'
    ITEM_SLOT = 'item_slot'
    LOCATION_DESIGNATION = 'location_designation'
    LOCATION_DYNAMIC_CLASS = 'location_dynamic_class'
    LOCATION_OBJECT_IDENTIFIER = 'location_object_identifier'
    LOOP_ELEMENT_DYNAMIC_CLASS = 'loop_element_dynamic_class'
    LOOP_ELEMENT_OBJECT_IDENTIFIER = 'loop_element_object_identifier'
    LOOP_NUMBER = 'loop_number'
    MANUFACTURER = 'manufacturer'
    METADATA = 'metadata'
    MODELNO = 'modelno'
    OBJECT_IDENTIFIER = 'object_identifier'
    PRODUCT_DESIGNATION = 'product_designation'
    PRODUCT_KEY = 'product_key'
    PRODUCT_KEY_ORIGINAL = 'product_key_original'
    PROTOCOL = 'protocol'
    RACK = 'rack'
    RACK_DYNAMIC_CLASS = 'rack_dynamic_class'
    RACK_OBJECT_IDENTIFIER = 'rack_object_identifier'
    REMOVE = 'remove'
    ROWIDHIGHWATERMARK = 'rowidhighwatermark'
    SHOW_KEY = 'show_key'
    SYMBOL_NAME = 'symbol_name'
    TAG_NUMBER = 'tag_number'
    TXN = 'txn'
    TYPE = 'type'



class S_Item_Function_Model(
        Enum):
    ALL_MARKING = 'all_marking'
    DATABASE_NAME = 'database_name'
    DYNAMIC_CLASS = 'dynamic_class'
    ITEM_DYNAMIC_CLASS = 'item_dynamic_class'
    ITEM_OBJECT_IDENTIFIER = 'item_object_identifier'
    LEFT = 'left'
    LEFT_MARKING = 'left_marking'
    MODELNO = 'modelno'
    MODELNO_ORIGINAL = 'modelno_original'
    OBJECT_IDENTIFIER = 'object_identifier'
    RIGHT = 'right'
    RIGHT_MARKING = 'right_marking'
    SYMBOL_NAME = 'symbol_name'

Script 1:

CREATE OR REPLACE TEMP VIEW VW_IOCard_Pre_Join AS
SELECT
    A.database_name,
    A.dynamic_class,
    A.object_identifier,
    B.ModelNo,
    B.Manufacturer,
    A.IOType,
    A.Class,
    A.ChannelNumber
FROM
    Sigraph_silver.S_Itemfunction A
INNER JOIN
    Sigraph_silver.S_Item_Function_Model B
ON
    A.database_name=B.database_name AND
    A.Item_Dynamic_Class=B.Item_Dynamic_Class AND
    A.Item_Object_identifier=B.Item_Object_identifier AND
    A.Dynamic_Class=B.Dynamic_Class AND
    A.Object_Identifier=B.Object_Identifier
WHERE
    B.Type='IO Module' AND
    A.ChannelNumber IS NOT NULL AND
    A.ChannelNumber <> '0' AND
    A.ChannelNumber <> '';

Script 2: Distinct Operation

CREATE OR REPLACE TEMP VIEW VW_IOCard_Distinct AS
SELECT DISTINCT *
FROM VW_IOCard_Pre_Join;

Script 3: Window Function

CREATE OR REPLACE TEMP VIEW VW_IOCard_Window AS
SELECT
    database_name,
    dynamic_class,
    object_identifier,
    ModelNo,
    CONCAT(COUNT(ChannelNumber) OVER (PARTITION BY database_name, IOType, object_identifier), ' - Channel -', Manufacturer) AS Description,
    MAX(Manufacturer) OVER (PARTITION BY ModelNo) as Manufacturer_Max,
    ChannelNumber,
    IOType,
    Class,
    COUNT(ChannelNumber) OVER (PARTITION BY database_name, IOType, object_identifier) as NoOfPoints
FROM
    VW_IOCard_Distinct;

Script 4: Final Script with Column Renaming

CREATE OR REPLACE TEMP VIEW VW_IOCard_Prep_Query AS
SELECT
    database_name,
    dynamic_class,
    object_identifier,
    ModelNo AS Model_Number,
    Description,
    Manufacturer_Max AS Manufacturer,
    ChannelNumber,
    IOType,
    Class,
    NoOfPoints
FROM
    VW_IOCard_Window;
This final script renames the columns and uses the results from the previous scripts. The operations

&&&&&&&&&&&&&&&&&&&&&&&&&&&&

  merged_dataframe = prepare_join(
        s_item_function,
        s_item_function_model)

    # Step 2: Obtain distinct rows
    distinct_dataframe = get_distinct(
        merged_dataframe)

    # Step 3: Apply window functions
    windowed_dataframe = apply_window_functions(
        distinct_dataframe)

    # Step 4: Rename columns
    final_dataframe = rename_columns(
        windowed_dataframe)

    return final_dataframe


def prepare_join(
        dataframe_one,
        dataframe_two):
    # Merging dataframes
    merged_dataframe = pd.merge(
            dataframe_one,
            dataframe_two,
            how='inner',
            left_on=[
                S_ItemFunction.DATABASE_NAME.value,
                S_ItemFunction.ITEM_DYNAMIC_CLASS.value,
                S_ItemFunction.ITEM_OBJECT_IDENTIFIER.value,
                S_ItemFunction.DYNAMIC_CLASS.value,
                S_ItemFunction.OBJECT_IDENTIFIER.value,
                S_ItemFunction.MODELNO.value
                ],
            right_on=[
                S_Item_Function_Model.DATABASE_NAME.value,
                S_Item_Function_Model.ITEM_DYNAMIC_CLASS.value,
                S_Item_Function_Model.ITEM_OBJECT_IDENTIFIER.value,
                S_Item_Function_Model.DYNAMIC_CLASS.value,
                S_Item_Function_Model.OBJECT_IDENTIFIER.value,
                S_Item_Function_Model.MODELNO.value
                ],
            )

    # Applying filters
    filtered_dataframe = merged_dataframe[
        (merged_dataframe[S_ItemFunction.TYPE.value] == 'IO Module') &
        (merged_dataframe[S_ItemFunction.CHANNELNUMBER.value].notnull()) &
        (merged_dataframe[S_ItemFunction.CHANNELNUMBER.value] != '0') &
        (merged_dataframe[S_ItemFunction.CHANNELNUMBER.value] != '')
        ]

    return filtered_dataframe



def get_distinct(
        dataframe):
    distinct_dataframe = dataframe.drop_duplicates()
    return distinct_dataframe


def apply_window_functions(dataframe):
    dataframe[S_IO_Catalogue.DESCRIPTION.value] = description(dataframe)
    dataframe[S_ItemFunction.MANUFACTURER.value] = max_manufacturer_by_modelno(dataframe)
    dataframe[S_IO_Catalogue.NOOFPOINTS.value] = count_channel_number(dataframe)
    return dataframe
def count_channel_number(dataframe):
    channel_count = dataframe.groupby(
        [
            S_ItemFunction.DATABASE_NAME.value,
            S_ItemFunction.IOTYPE.value,
            S_ItemFunction.ITEM_OBJECT_IDENTIFIER.value
        ])[S_ItemFunction.CHANNELNUMBER.value].transform('count')
    return channel_count

def max_manufacturer_by_modelno(dataframe):
    max_manufacturer = dataframe.groupby(
        S_ItemFunction.MODELNO.value)[S_ItemFunction.MANUFACTURER.value].transform('max')
    return max_manufacturer

def description(dataframe):
    # ensure data types are compatible for string concatenation
    channel_count = count_channel_number(dataframe).astype(str)
    manufacturer = dataframe[S_ItemFunction.MANUFACTURER.value].astype(str)

    description = channel_count + ' - Channel -' + manufacturer
    return description





def rename_columns(
        dataframe):
    dataframe.rename(
            columns={
                S_ItemFunction.DATABASE_NAME.value: S_IO_Catalogue.DATABASE_NAME.value,
                S_ItemFunction.DYNAMIC_CLASS.value: S_IO_Catalogue.DYNAMIC_CLASS.value,
                S_ItemFunction.OBJECT_IDENTIFIER.value: S_IO_Catalogue.OBJECT_IDENTIFIER.value,
                S_ItemFunction.MODELNO.value: S_IO_Catalogue.MODEL_NUMBER.value,
                S_ItemFunction.IOTYPE.value: S_IO_Catalogue.IOTYPE.value,
                S_ItemFunction.CLASS.value: S_IO_Catalogue.CLASS.value,
                S_ItemFunction.CHANNELNUMBER.value: S_IO_Catalogue.CHANNEL.value
                },
            inplace=True
            )
    return dataframe